generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model appointments {
  id              String               @id
  companyName     String
  contactName     String
  phone           String
  email           String
  status          appointment_status   @default(PENDING)
  lastContact     String?
  nextAction      String
  notes           String               @default("")
  priority        priority             @default(C)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  details         appointment_details?
  calendar_events calendar_events[]

  @@index([status], name: "idx_appointments_status")
  @@index([updatedAt], name: "idx_appointments_updated")
}

model calendar_events {
  id           String     @id
  title        String
  date         String
  time         String
  endTime      String?
  type         event_type @default(MEETING)
  description  String     @default("")
  participants String[]   @default([])
  location     String?

  // 新規追加フィールド
  userId        String?
  projectId     String?
  taskId        String?
  appointmentId String?

  // カテゴリ・重要度
  category   event_category @default(EVENT)
  importance Float          @default(0.5)

  // 繰り返し設定
  isRecurring      Boolean @default(false)
  recurringPattern String?
  recurringEnd     String?

  // 表示設定
  colorCode String?
  isAllDay  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  users           users?           @relation(fields: [userId], references: [id])
  projects        projects?        @relation(fields: [projectId], references: [id])
  tasks           tasks?           @relation(fields: [taskId], references: [id])
  appointments    appointments?    @relation(fields: [appointmentId], references: [id])
  recurring_rules recurring_rules? @relation(fields: [recurringPattern], references: [id])

  @@index([date], name: "idx_calendar_date")
  @@index([userId, date], name: "idx_calendar_user_date")
  @@index([appointmentId], name: "idx_calendar_appointment")
  @@index([taskId], name: "idx_calendar_task")
  @@index([projectId], name: "idx_calendar_project")
}

model connections {
  id           String          @id
  date         String
  location     String
  company      String
  name         String
  position     String
  type         connection_type @default(COMPANY)
  description  String
  conversation String
  potential    String
  businessCard String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime
}

model knowledge_items {
  id                  String             @id
  title               String
  category            knowledge_category @default(BUSINESS)
  content             String
  author              String
  tags                String[]           @default([])
  likes               Int                @default(0)
  source_type         String?
  source_document_id  String?
  source_page_number  Int?
  source_url          String?
  auto_generated      Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@index([category], name: "idx_knowledge_category")
  @@index([createdAt], name: "idx_knowledge_created")
  @@index([source_document_id], name: "idx_knowledge_source")
  @@index([auto_generated], name: "idx_knowledge_auto")
}

model line_integration_logs {
  id               String            @id
  messageId        String
  groupId          String
  userId           String
  originalMessage  String
  processedMessage String
  extractedData    Json?
  processingStatus processing_status @default(PENDING)
  confidence       Float             @default(0.0)
  createdItems     Json              @default("[]")
  userConfirmation Boolean?
  errorMessage     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model projects {
  id                    String                  @id
  name                  String
  description           String                  @default("")
  status                project_status          @default(PLANNING)
  progress              Int                     @default(0)
  startDate             String
  endDate               String?
  teamMembers           String[]                @default([])
  priority              priority                @default(C)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  phase                 String                  @default("concept")
  kgi                   String                  @default("")
  successProbability    Float                   @default(0.0)
  activityScore         Float                   @default(0.0)
  connectionPower       Int                     @default(0)
  lastActivityDate      DateTime                @default(now())
  phaseChangeDate       DateTime                @default(now())
  tasks                 tasks[]
  project_relationships project_relationships[]
  project_alerts        project_alerts[]
  project_phase_history project_phase_history[]
  calendar_events       calendar_events[]
}

model task_archives {
  id             String        @id
  originalTaskId String        @unique
  taskData       Json
  archiveLevel   archive_level @default(SOFT)
  archivedAt     DateTime      @default(now())
}

model task_collaborators {
  id        String   @id
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  tasks     tasks    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}

model tasks {
  id                 String               @id
  title              String
  description        String               @default("")
  projectId          String?
  userId             String
  status             task_status          @default(IDEA)
  priority           priority             @default(C)
  dueDate            String?
  isArchived         Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  estimatedHours     Float                @default(0)
  actualHours        Float                @default(0)
  difficultyScore    Int                  @default(3)
  aiIssueLevel       String               @default("C")
  resourceWeight     Float                @default(1.0)
  task_collaborators task_collaborators[]
  projects           projects?            @relation(fields: [projectId], references: [id])
  users              users                @relation(fields: [userId], references: [id])
  calendar_events    calendar_events[]

  @@index([dueDate], name: "idx_tasks_due")
  @@index([userId, isArchived, status], name: "idx_tasks_filter")
  @@index([projectId], name: "idx_tasks_project")
  @@index([createdAt], name: "idx_tasks_created")
}

model users {
  id                    String                  @id
  name                  String
  email                 String?                 @unique
  lineUserId            String?                 @unique
  discordId             String?                 @unique
  color                 String
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  skills                Json                    @default("{}")
  preferences           Json                    @default("{}")
  workStyle             Json                    @default("{}")
  task_collaborators    task_collaborators[]
  tasks                 tasks[]
  user_alerts           user_alerts[]
  project_phase_history project_phase_history[]
  calendar_events       calendar_events[]
  personal_schedules    personal_schedules[]
}

enum appointment_status {
  PENDING
  CONTACTED
  INTERESTED
  NOT_INTERESTED
  SCHEDULED
}

enum archive_level {
  SOFT
  PERMANENT
}

enum connection_type {
  STUDENT
  COMPANY
}

enum event_type {
  MEETING
  EVENT
  DEADLINE
}

enum knowledge_category {
  INDUSTRY
  SALES
  TECHNICAL
  BUSINESS
}

enum priority {
  A
  B
  C
  D
}

enum processing_status {
  PENDING
  PROCESSED
  FAILED
  MANUAL_REVIEW
}

enum project_status {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
}

enum task_status {
  IDEA
  PLAN
  DO
  CHECK
  COMPLETE
  KNOWLEDGE
  DELETE
}

model discord_metrics {
  id                  String   @id @default(cuid())
  date                DateTime @unique @db.Date
  memberCount         Int      @map("member_count")
  onlineCount         Int      @map("online_count")
  dailyMessages       Int      @map("daily_messages")
  dailyUserMessages   Int      @default(0) @map("daily_user_messages")
  dailyStaffMessages  Int      @default(0) @map("daily_staff_messages")
  activeUsers         Int      @map("active_users")
  engagementScore     Float    @map("engagement_score")
  channelMessageStats Json     @default("{}") @map("channel_message_stats")
  staffChannelStats   Json     @default("{}") @map("staff_channel_stats")
  roleCounts          Json     @default("{}") @map("role_counts")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("discord_metrics")
}

model project_relationships {
  id                   String   @id @default(cuid())
  projectId            String
  relatedType          String
  relatedId            String
  relationshipStrength Float    @default(1.0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  projects             projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, relatedType, relatedId])
}

model ai_evaluations {
  id             String   @id @default(cuid())
  entityType     String
  entityId       String
  evaluationType String
  score          Float
  reasoning      String?
  confidence     Float    @default(0.0)
  modelVersion   String   @default("gemini-1.5")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model project_alerts {
  id          String    @id @default(cuid())
  projectId   String
  alertType   String
  severity    String    @default("medium")
  message     String
  isRead      Boolean   @default(false)
  isResolved  Boolean   @default(false)
  triggeredAt DateTime  @default(now())
  resolvedAt  DateTime?
  createdAt   DateTime  @default(now())
  projects    projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model user_alerts {
  id                String   @id @default(cuid())
  userId            String
  alertType         String
  severity          String   @default("medium")
  message           String
  relatedEntityType String?
  relatedEntityId   String?
  isRead            Boolean  @default(false)
  createdAt         DateTime @default(now())
  users             users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model project_phase_history {
  id        String   @id @default(cuid())
  projectId String
  fromPhase String?
  toPhase   String
  changedBy String?
  reason    String?
  createdAt DateTime @default(now())
  projects  projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users     users?   @relation(fields: [changedBy], references: [id])
}

model ai_call_logs {
  id           String   @id @default(cuid())
  callType     String
  prompt       String
  response     String?
  tokenUsed    Int      @default(0)
  duration     Int      @default(0)
  status       String
  errorMessage String?
  userId       String?
  createdAt    DateTime @default(now())
}

model appointment_details {
  id                 String                 @id @default(cuid())
  appointmentId      String                 @unique
  processingStatus   appointment_processing @default(PENDING)
  relationshipStatus relationship_status    @default(FIRST_CONTACT)
  phaseStatus        appointment_phase      @default(LEAD)
  sourceType         appointment_source     @default(REFERRAL)
  sourceDetails      String                 @default("")
  importance         Float                  @default(0.0)
  businessValue      Float                  @default(0.0)
  followUpActions    String[]               @default([])
  meetingHistory     Json[]                 @default([])
  decisionMakers     String[]               @default([])
  budgetInfo         String                 @default("")
  timeline           String                 @default("")
  competitors        String[]               @default([])
  painPoints         String[]               @default([])
  proposalStatus     String                 @default("")
  contractValue      Float?
  closingProbability Float                  @default(0.0)
  nextMilestone      String                 @default("")
  internalNotes      String                 @default("")
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  appointments       appointments           @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

enum appointment_processing {
  PENDING
  IN_PROGRESS
  COMPLETED
  FOLLOW_UP
  CLOSED
}

enum relationship_status {
  FIRST_CONTACT
  RAPPORT_BUILDING
  TRUST_ESTABLISHED
  STRATEGIC_PARTNER
  LONG_TERM_CLIENT
}

enum appointment_phase {
  LEAD
  PROSPECT
  PROPOSAL
  NEGOTIATION
  CLOSING
  POST_SALE
}

enum appointment_source {
  REFERRAL
  COLD_OUTREACH
  NETWORKING_EVENT
  INBOUND_INQUIRY
  SOCIAL_MEDIA
  EXISTING_CLIENT
  PARTNER_REFERRAL
}

// カレンダー機能用の新規enum
enum event_category {
  GENERAL
  MEETING
  APPOINTMENT
  TASK_DUE
  PROJECT
  PERSONAL
  TEAM
  EVENT
}

enum recurrence_type {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

// 繰り返しルールテーブル
model recurring_rules {
  id              String            @id @default(cuid())
  ruleName        String
  recurrenceType  recurrence_type
  weekdays        Int[]             @default([])
  monthDay        Int?
  monthWeek       Int?
  monthWeekday    Int?
  interval        Int               @default(1)
  startDate       String
  endDate         String?
  maxOccurrences  Int?
  excludeDates    String[]          @default([])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  calendar_events calendar_events[]
}

model personal_schedules {
  id          String   @id @default(cuid())
  title       String
  date        String
  time        String
  endTime     String?
  description String?  @default("")
  location    String?
  userId      String
  priority    priority @default(C)
  isAllDay    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([date], name: "idx_personal_date")
  @@index([userId, date], name: "idx_personal_user_date")
  @@map("personal_schedules")
}

model google_docs_sources {
  id             String                   @id @default(cuid())
  document_id    String                   @unique
  document_url   String
  title          String
  last_modified  DateTime
  sync_status    google_docs_sync_status  @default(PENDING)
  trigger_type   String                   @default("manual")
  word_count     Int                      @default(0)
  gas_version    String                   @default("2.0")
  content_hash   String?
  last_error     String?
  page_count     Int                      @default(0)
  error_message  String?
  last_synced    DateTime?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt

  @@index([trigger_type], name: "idx_trigger_type")
  @@index([content_hash], name: "idx_content_hash")
  @@index([sync_status], name: "idx_sync_status")
  @@index([document_id], name: "idx_document_id")
  @@map("google_docs_sources")
}

// 高度コンテンツ処理・AI分析システム用テーブル

// AI分析結果テーブル - コンテンツから抽出された構造化データ
model ai_content_analysis {
  id                 String                      @id @default(cuid())
  source_document_id String                      // google_docs_sources.document_id
  content_section    String                      // 分析対象のコンテンツセクション
  analysis_type      ai_analysis_type            @default(COMPREHENSIVE)
  
  // 抽出されたエンティティ
  extracted_tasks    Json                        @default("[]")
  extracted_events   Json                        @default("[]")
  extracted_projects Json                        @default("[]")
  extracted_contacts Json                        @default("[]")
  extracted_dates    Json                        @default("[]")
  
  // AI信頼度スコア
  confidence_score   Float                       @default(0.0)
  model_version      String                      @default("gemini-1.5")
  processing_time    Int                         @default(0) // ミリ秒
  
  // 分析メタデータ
  keywords           String[]                    @default([])
  sentiment_score    Float?                      // センチメント分析
  urgency_level      urgency_level               @default(MEDIUM)
  business_value     Float                       @default(0.0)
  
  // レコメンデーション
  recommendations    Json                        @default("[]")
  auto_suggestions   Json                        @default("[]")
  
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  
  @@index([source_document_id], name: "idx_ai_analysis_source")
  @@index([analysis_type], name: "idx_ai_analysis_type")
  @@index([confidence_score], name: "idx_ai_analysis_confidence")
  @@index([urgency_level], name: "idx_ai_analysis_urgency")
  @@map("ai_content_analysis")
}

// レコメンデーション管理テーブル
model content_recommendations {
  id                   String                 @id @default(cuid())
  analysis_id          String                 // ai_content_analysis.id
  recommendation_type  recommendation_type    @default(TASK_CREATION)
  
  // レコメンド内容
  title                String
  description          String
  suggested_data       Json                   @default("{}")
  target_entity_type   String                 // 'task', 'project', 'appointment', 'event'
  
  // ユーザー操作
  status               recommendation_status  @default(PENDING)
  user_feedback        String?
  accepted_at          DateTime?
  rejected_at          DateTime?
  created_entity_id    String?                // 作成されたエンティティのID
  
  // システム評価
  relevance_score      Float                  @default(0.0)
  priority_score       Float                  @default(0.0)
  implementation_ease  Float                  @default(0.0)
  
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  
  @@index([analysis_id], name: "idx_recommendation_analysis")
  @@index([recommendation_type], name: "idx_recommendation_type")
  @@index([status], name: "idx_recommendation_status")
  @@index([relevance_score], name: "idx_recommendation_relevance")
  @@map("content_recommendations")
}

// コンテンツ処理ログテーブル - 処理監視用
model content_processing_logs {
  id                String                    @id @default(cuid())
  source_document_id String
  processing_step   processing_step            @default(CONTENT_EXTRACTION)
  
  // 処理詳細
  step_status       processing_step_status     @default(IN_PROGRESS)
  input_data        Json?                      @default("{}")
  output_data       Json?                      @default("{}")
  processing_time   Int                        @default(0)
  
  // エラー情報
  error_message     String?
  retry_count       Int                        @default(0)
  max_retries       Int                        @default(3)
  
  // システム情報
  worker_id         String?                    // 処理したワーカーID
  gas_version       String?                    // GASバージョン
  system_version    String                     @default("2.0")
  
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  
  @@index([source_document_id], name: "idx_processing_logs_source")
  @@index([processing_step], name: "idx_processing_logs_step")
  @@index([step_status], name: "idx_processing_logs_status")
  @@index([createdAt], name: "idx_processing_logs_created")
  @@map("content_processing_logs")
}

// リアルタイム監視用メトリクステーブル
model gas_sync_metrics {
  id                    String   @id @default(cuid())
  metric_date           DateTime @unique @db.Date
  
  // 同期統計
  total_syncs           Int      @default(0)
  successful_syncs      Int      @default(0)
  failed_syncs          Int      @default(0)
  
  // トリガー別統計
  manual_triggers       Int      @default(0)
  edit_triggers         Int      @default(0)
  scheduled_triggers    Int      @default(0)
  
  // パフォーマンス統計
  avg_processing_time   Float    @default(0.0)
  max_processing_time   Int      @default(0)
  min_processing_time   Int      @default(0)
  
  // AI分析統計
  ai_analyses_performed Int      @default(0)
  avg_confidence_score  Float    @default(0.0)
  recommendations_made  Int      @default(0)
  recommendations_accepted Int   @default(0)
  
  // コンテンツ統計
  total_knowledge_items Int      @default(0)
  avg_content_length    Float    @default(0.0)
  unique_documents      Int      @default(0)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([metric_date], name: "idx_gas_metrics_date")
  @@map("gas_sync_metrics")
}

// AI分析・コンテンツ処理用のEnum定義
enum ai_analysis_type {
  COMPREHENSIVE      // 全体的な分析
  TASK_FOCUSED      // タスク抽出に特化
  EVENT_FOCUSED     // イベント抽出に特化
  PROJECT_FOCUSED   // プロジェクト抽出に特化
  SENTIMENT_ONLY    // センチメント分析のみ
}

enum urgency_level {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum recommendation_type {
  TASK_CREATION
  PROJECT_CREATION
  EVENT_SCHEDULING
  APPOINTMENT_BOOKING
  CONTACT_ADDITION
  KNOWLEDGE_TAGGING
  PRIORITY_ADJUSTMENT
}

enum recommendation_status {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
  IMPLEMENTED
}

enum processing_step {
  CONTENT_EXTRACTION
  SECTION_SPLITTING
  AI_ANALYSIS
  ENTITY_EXTRACTION
  RECOMMENDATION_GENERATION
  KNOWLEDGE_CREATION
  CLEANUP
}

enum processing_step_status {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  SKIPPED
}

enum google_docs_sync_status {
  PENDING
  SYNCING
  COMPLETED
  ERROR
  FAILED
}
