generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model appointments {
  id              String               @id
  companyName     String
  contactName     String
  phone           String
  email           String
  status          appointment_status   @default(PENDING)
  lastContact     String?
  nextAction      String
  notes           String               @default("")
  priority        priority             @default(C)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  assignedTo      String?
  createdBy       String?
  informationUrl  String?
  meetingUrl      String?
  details         appointment_details?
  assignee        users?               @relation("AppointmentAssignee", fields: [assignedTo], references: [id])
  creator         users?               @relation("AppointmentCreator", fields: [createdBy], references: [id])
  calendar_events calendar_events[]

  @@index([status], map: "idx_appointments_status")
  @@index([createdBy], map: "idx_appointments_created_by")
  @@index([assignedTo], map: "idx_appointments_assigned_to")
  @@index([updatedAt], map: "idx_appointments_updated")
}

model calendar_events {
  id               String           @id
  title            String
  date             String
  time             String
  type             event_type       @default(MEETING)
  description      String           @default("")
  participants     String[]         @default([])
  location         String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  appointmentId    String?
  category         event_category   @default(EVENT)
  colorCode        String?
  endTime          String?
  importance       Float            @default(0.5)
  isAllDay         Boolean          @default(false)
  isRecurring      Boolean          @default(false)
  projectId        String?
  recurringEnd     String?
  recurringPattern String?
  taskId           String?
  userId           String?
  assignedTo       String?
  createdBy        String?
  meetingUrl       String?
  appointments     appointments?    @relation(fields: [appointmentId], references: [id])
  assignee         users?           @relation("CalendarAssignee", fields: [assignedTo], references: [id])
  creator          users?           @relation("CalendarCreator", fields: [createdBy], references: [id])
  projects         projects?        @relation(fields: [projectId], references: [id])
  recurring_rules  recurring_rules? @relation(fields: [recurringPattern], references: [id])
  tasks            tasks?           @relation(fields: [taskId], references: [id])
  users            users?           @relation("CalendarUser", fields: [userId], references: [id])

  @@index([date], map: "idx_calendar_date")
  @@index([userId, date], map: "idx_calendar_user_date")
  @@index([createdBy], map: "idx_calendar_created_by")
  @@index([assignedTo, date], map: "idx_calendar_assigned_date")
  @@index([appointmentId], map: "idx_calendar_appointment")
  @@index([taskId], map: "idx_calendar_task")
  @@index([projectId], map: "idx_calendar_project")
}

model connections {
  id           String          @id
  date         String
  location     String
  company      String
  name         String
  position     String
  type         connection_type @default(COMPANY)
  description  String
  conversation String
  potential    String
  businessCard String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime
  assignedTo   String?
  createdBy    String?
  email        String?
  phone        String?
  assignee     users?          @relation("ConnectionAssignee", fields: [assignedTo], references: [id])
  creator      users?          @relation("ConnectionCreator", fields: [createdBy], references: [id])

  @@index([type], map: "idx_connections_type")
  @@index([createdBy], map: "idx_connections_created_by")
  @@index([assignedTo], map: "idx_connections_assigned_to")
  @@index([updatedAt], map: "idx_connections_updated")
}

model knowledge_items {
  id                 String             @id
  title              String
  category           knowledge_category @default(BUSINESS)
  content            String
  author             String
  tags               String[]           @default([])
  likes              Int                @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  auto_generated     Boolean            @default(false)
  source_document_id String?
  source_page_number Int?
  source_type        String?
  source_url         String?
  assignedTo         String?
  createdBy          String?
  assignee           users?             @relation("KnowledgeAssignee", fields: [assignedTo], references: [id])
  creator            users?             @relation("KnowledgeCreator", fields: [createdBy], references: [id])

  @@index([category], map: "idx_knowledge_category")
  @@index([createdAt], map: "idx_knowledge_created")
  @@index([source_document_id], map: "idx_knowledge_source")
  @@index([auto_generated], map: "idx_knowledge_auto")
  @@index([createdBy], map: "idx_knowledge_created_by")
  @@index([assignedTo], map: "idx_knowledge_assigned_to")
}

model line_integration_logs {
  id               String            @id
  messageId        String
  groupId          String
  userId           String
  originalMessage  String
  processedMessage String
  extractedData    Json?
  processingStatus processing_status @default(PENDING)
  confidence       Float             @default(0.0)
  createdItems     Json              @default("[]")
  userConfirmation Boolean?
  errorMessage     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model projects {
  id                    String                  @id
  name                  String
  description           String                  @default("")
  status                project_status          @default(PLANNING)
  progress              Int                     @default(0)
  startDate             String
  endDate               String?
  teamMembers           String[]                @default([])
  priority              priority                @default(C)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  phase                 String                  @default("concept")
  kgi                   String                  @default("")
  successProbability    Float                   @default(0.0)
  activityScore         Float                   @default(0.0)
  connectionPower       Int                     @default(0)
  lastActivityDate      DateTime                @default(now())
  phaseChangeDate       DateTime                @default(now())
  assignedTo            String?
  createdBy             String?
  calendar_events       calendar_events[]
  project_alerts        project_alerts[]
  project_phase_history project_phase_history[]
  project_relationships project_relationships[]
  manager               users?                  @relation("ProjectManager", fields: [assignedTo], references: [id])
  creator               users?                  @relation("ProjectCreator", fields: [createdBy], references: [id])
  task_relationships    task_relationships[]
  tasks                 tasks[]

  @@index([status], map: "idx_projects_status")
  @@index([createdBy], map: "idx_projects_created_by")
  @@index([assignedTo], map: "idx_projects_assigned_to")
  @@index([updatedAt], map: "idx_projects_updated")
}

model task_archives {
  id             String        @id
  originalTaskId String        @unique
  taskData       Json
  archiveLevel   archive_level @default(SOFT)
  archivedAt     DateTime      @default(now())
}

model task_collaborators {
  id        String   @id
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  tasks     tasks    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}

model tasks {
  id                  String               @id
  title               String
  description         String               @default("")
  projectId           String?
  userId              String
  status              task_status          @default(IDEA)
  priority            priority             @default(C)
  dueDate             String?
  isArchived          Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  estimatedHours      Float                @default(0)
  actualHours         Float                @default(0)
  difficultyScore     Int                  @default(3)
  aiIssueLevel        String               @default("C")
  resourceWeight      Float                @default(1.0)
  assignedTo          String?
  createdBy           String?
  calendar_events     calendar_events[]
  task_collaborators  task_collaborators[]
  sourceRelationships task_relationships[] @relation("SourceTask")
  targetRelationships task_relationships[] @relation("TargetTask")
  assignee            users?               @relation("TaskAssignee", fields: [assignedTo], references: [id])
  creator             users?               @relation("TaskCreator", fields: [createdBy], references: [id])
  projects            projects?            @relation(fields: [projectId], references: [id])
  users               users                @relation("TaskUser", fields: [userId], references: [id])

  @@index([dueDate], map: "idx_tasks_due")
  @@index([userId, isArchived, status], map: "idx_tasks_filter")
  @@index([projectId], map: "idx_tasks_project")
  @@index([createdAt], map: "idx_tasks_created")
  @@index([createdBy], map: "idx_tasks_created_by")
  @@index([assignedTo], map: "idx_tasks_assigned_to")
  @@index([assignedTo, status], map: "idx_tasks_assigned_status")
}

model users {
  id                    String                  @id
  name                  String
  email                 String?                 @unique
  lineUserId            String?                 @unique
  discordId             String?                 @unique
  color                 String
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  skills                Json                    @default("{}")
  preferences           Json                    @default("{}")
  workStyle             Json                    @default("{}")
  assigned_ai_analysis  ai_content_analysis[]   @relation("AIAnalysisAssignee")
  created_ai_analysis   ai_content_analysis[]   @relation("AIAnalysisCreator")
  assigned_appointments appointments[]          @relation("AppointmentAssignee")
  created_appointments  appointments[]          @relation("AppointmentCreator")
  assigned_events       calendar_events[]       @relation("CalendarAssignee")
  created_events        calendar_events[]       @relation("CalendarCreator")
  calendar_events       calendar_events[]       @relation("CalendarUser")
  assigned_connections  connections[]           @relation("ConnectionAssignee")
  created_connections   connections[]           @relation("ConnectionCreator")
  assigned_knowledge    knowledge_items[]       @relation("KnowledgeAssignee")
  created_knowledge     knowledge_items[]       @relation("KnowledgeCreator")
  personal_schedules    personal_schedules[]
  project_phase_history project_phase_history[]
  managed_projects      projects[]              @relation("ProjectManager")
  created_projects      projects[]              @relation("ProjectCreator")
  task_collaborators    task_collaborators[]
  assigned_tasks        tasks[]                 @relation("TaskAssignee")
  created_tasks         tasks[]                 @relation("TaskCreator")
  tasks                 tasks[]                 @relation("TaskUser")
  user_alerts           user_alerts[]
}

model discord_metrics {
  id                  String   @id @default(cuid())
  date                DateTime @unique @db.Date
  memberCount         Int      @map("member_count")
  onlineCount         Int      @map("online_count")
  dailyMessages       Int      @map("daily_messages")
  dailyUserMessages   Int      @default(0) @map("daily_user_messages")
  dailyStaffMessages  Int      @default(0) @map("daily_staff_messages")
  activeUsers         Int      @map("active_users")
  engagementScore     Float    @map("engagement_score")
  channelMessageStats Json     @default("{}") @map("channel_message_stats")
  staffChannelStats   Json     @default("{}") @map("staff_channel_stats")
  roleCounts          Json     @default("{}") @map("role_counts")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("discord_metrics")
}

model project_relationships {
  id                   String   @id @default(cuid())
  projectId            String
  relatedType          String
  relatedId            String
  relationshipStrength Float    @default(1.0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  projects             projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, relatedType, relatedId])
}

model ai_evaluations {
  id             String   @id @default(cuid())
  entityType     String
  entityId       String
  evaluationType String
  score          Float
  reasoning      String?
  confidence     Float    @default(0.0)
  modelVersion   String   @default("gemini-1.5")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model project_alerts {
  id          String    @id @default(cuid())
  projectId   String
  alertType   String
  severity    String    @default("medium")
  message     String
  isRead      Boolean   @default(false)
  isResolved  Boolean   @default(false)
  triggeredAt DateTime  @default(now())
  resolvedAt  DateTime?
  createdAt   DateTime  @default(now())
  projects    projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model user_alerts {
  id                String   @id @default(cuid())
  userId            String
  alertType         String
  severity          String   @default("medium")
  message           String
  relatedEntityType String?
  relatedEntityId   String?
  isRead            Boolean  @default(false)
  createdAt         DateTime @default(now())
  users             users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model project_phase_history {
  id        String   @id @default(cuid())
  projectId String
  fromPhase String?
  toPhase   String
  changedBy String?
  reason    String?
  createdAt DateTime @default(now())
  users     users?   @relation(fields: [changedBy], references: [id])
  projects  projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ai_call_logs {
  id           String   @id @default(cuid())
  callType     String
  prompt       String
  response     String?
  tokenUsed    Int      @default(0)
  duration     Int      @default(0)
  status       String
  errorMessage String?
  userId       String?
  createdAt    DateTime @default(now())
}

model appointment_details {
  id                 String                 @id @default(cuid())
  appointmentId      String                 @unique
  processingStatus   appointment_processing @default(PENDING)
  relationshipStatus relationship_status    @default(FIRST_CONTACT)
  phaseStatus        appointment_phase      @default(LEAD)
  sourceType         appointment_source     @default(REFERRAL)
  sourceDetails      String                 @default("")
  importance         Float                  @default(0.0)
  businessValue      Float                  @default(0.0)
  followUpActions    String[]               @default([])
  meetingHistory     Json[]                 @default([])
  decisionMakers     String[]               @default([])
  budgetInfo         String                 @default("")
  timeline           String                 @default("")
  competitors        String[]               @default([])
  painPoints         String[]               @default([])
  proposalStatus     String                 @default("")
  contractValue      Float?
  closingProbability Float                  @default(0.0)
  nextMilestone      String                 @default("")
  internalNotes      String                 @default("")
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  appointments       appointments           @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model recurring_rules {
  id              String            @id @default(cuid())
  ruleName        String
  recurrenceType  recurrence_type
  weekdays        Int[]             @default([])
  monthDay        Int?
  monthWeek       Int?
  monthWeekday    Int?
  interval        Int               @default(1)
  startDate       String
  endDate         String?
  maxOccurrences  Int?
  excludeDates    String[]          @default([])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  calendar_events calendar_events[]
}

model personal_schedules {
  id          String   @id @default(cuid())
  title       String
  date        String
  time        String
  endTime     String?
  description String?  @default("")
  location    String?
  userId      String
  priority    priority @default(C)
  isAllDay    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([date], map: "idx_personal_date")
  @@index([userId, date], map: "idx_personal_user_date")
  @@map("personal_schedules")
}

model google_docs_sources {
  id            String                  @id @default(cuid())
  document_id   String                  @unique
  document_url  String
  title         String
  last_modified DateTime
  sync_status   google_docs_sync_status @default(PENDING)
  trigger_type  String                  @default("manual")
  word_count    Int                     @default(0)
  gas_version   String                  @default("2.0")
  content_hash  String?
  last_error    String?
  page_count    Int                     @default(0)
  error_message String?
  last_synced   DateTime?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  @@index([trigger_type], map: "idx_trigger_type")
  @@index([content_hash], map: "idx_content_hash")
  @@index([sync_status], map: "idx_sync_status")
  @@index([document_id], map: "idx_document_id")
  @@map("google_docs_sources")
}

model ai_content_analysis {
  id                 String           @id @default(cuid())
  source_document_id String
  analysis_type      ai_analysis_type @default(COMPREHENSIVE)
  extracted_tasks    Json             @default("[]")
  extracted_events   Json             @default("[]")
  extracted_projects Json             @default("[]")
  extracted_contacts Json             @default("[]")
  extracted_dates    Json             @default("[]")
  confidence_score   Float            @default(0.0)
  model_version      String           @default("gemini-1.5")
  processing_time    Int              @default(0)
  keywords           String[]         @default([])
  sentiment_score    Float?
  urgency_level      urgency_level    @default(MEDIUM)
  business_value     Float            @default(0.0)
  recommendations    Json             @default("[]")
  auto_suggestions   Json             @default("[]")
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  summary            String           @default("")
  title              String           @default("")
  assignedTo         String?
  createdBy          String?
  assignee           users?           @relation("AIAnalysisAssignee", fields: [assignedTo], references: [id])
  creator            users?           @relation("AIAnalysisCreator", fields: [createdBy], references: [id])

  @@index([source_document_id], map: "idx_ai_analysis_source")
  @@index([analysis_type], map: "idx_ai_analysis_type")
  @@index([confidence_score], map: "idx_ai_analysis_confidence")
  @@index([urgency_level], map: "idx_ai_analysis_urgency")
  @@index([createdBy], map: "idx_ai_analysis_created_by")
  @@index([assignedTo], map: "idx_ai_analysis_assigned_to")
  @@map("ai_content_analysis")
}

model content_recommendations {
  id                  String                @id @default(cuid())
  analysis_id         String
  recommendation_type recommendation_type   @default(TASK_CREATION)
  title               String
  description         String
  suggested_data      Json                  @default("{}")
  target_entity_type  String
  status              recommendation_status @default(PENDING)
  user_feedback       String?
  accepted_at         DateTime?
  rejected_at         DateTime?
  created_entity_id   String?
  relevance_score     Float                 @default(0.0)
  priority_score      Float                 @default(0.0)
  implementation_ease Float                 @default(0.0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@index([analysis_id], map: "idx_recommendation_analysis")
  @@index([recommendation_type], map: "idx_recommendation_type")
  @@index([status], map: "idx_recommendation_status")
  @@index([relevance_score], map: "idx_recommendation_relevance")
  @@map("content_recommendations")
}

model content_processing_logs {
  id                 String                 @id @default(cuid())
  source_document_id String
  processing_step    processing_step        @default(CONTENT_EXTRACTION)
  step_status        processing_step_status @default(IN_PROGRESS)
  input_data         Json?                  @default("{}")
  output_data        Json?                  @default("{}")
  processing_time    Int                    @default(0)
  error_message      String?
  retry_count        Int                    @default(0)
  max_retries        Int                    @default(3)
  worker_id          String?
  gas_version        String?
  system_version     String                 @default("2.0")
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt

  @@index([source_document_id], map: "idx_processing_logs_source")
  @@index([processing_step], map: "idx_processing_logs_step")
  @@index([step_status], map: "idx_processing_logs_status")
  @@index([createdAt], map: "idx_processing_logs_created")
  @@map("content_processing_logs")
}

model gas_sync_metrics {
  id                       String   @id @default(cuid())
  metric_date              DateTime @unique @db.Date
  total_syncs              Int      @default(0)
  successful_syncs         Int      @default(0)
  failed_syncs             Int      @default(0)
  manual_triggers          Int      @default(0)
  edit_triggers            Int      @default(0)
  scheduled_triggers       Int      @default(0)
  avg_processing_time      Float    @default(0.0)
  max_processing_time      Int      @default(0)
  min_processing_time      Int      @default(0)
  ai_analyses_performed    Int      @default(0)
  avg_confidence_score     Float    @default(0.0)
  recommendations_made     Int      @default(0)
  recommendations_accepted Int      @default(0)
  total_knowledge_items    Int      @default(0)
  avg_content_length       Float    @default(0.0)
  unique_documents         Int      @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@index([metric_date], map: "idx_gas_metrics_date")
  @@map("gas_sync_metrics")
}

model task_relationships {
  id               String            @id @default(cuid())
  sourceTaskId     String            @map("source_task_id")
  targetTaskId     String?           @map("target_task_id")
  projectId        String?           @map("project_id")
  relationshipType relationship_type @map("relationship_type")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  project          projects?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sourceTask       tasks             @relation("SourceTask", fields: [sourceTaskId], references: [id], onDelete: Cascade)
  targetTask       tasks?            @relation("TargetTask", fields: [targetTaskId], references: [id], onDelete: Cascade)

  @@index([sourceTaskId], map: "idx_task_relationships_source")
  @@index([targetTaskId], map: "idx_task_relationships_target")
  @@index([projectId], map: "idx_task_relationships_project")
  @@index([relationshipType], map: "idx_task_relationships_type")
  @@map("task_relationships")
}

enum appointment_status {
  PENDING
  CONTACTED
  INTERESTED
  NOT_INTERESTED
  SCHEDULED
}

enum archive_level {
  SOFT
  PERMANENT
}

enum connection_type {
  STUDENT
  COMPANY
}

enum event_type {
  MEETING
  EVENT
  DEADLINE
}

enum knowledge_category {
  INDUSTRY
  SALES
  TECHNICAL
  BUSINESS
}

enum priority {
  A
  B
  C
  D
}

enum processing_status {
  PENDING
  PROCESSED
  FAILED
  MANUAL_REVIEW
}

enum project_status {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
}

enum task_status {
  IDEA
  PLAN
  DO
  CHECK
  COMPLETE
  KNOWLEDGE
  DELETE
}

enum appointment_processing {
  PENDING
  IN_PROGRESS
  COMPLETED
  FOLLOW_UP
  CLOSED
}

enum relationship_status {
  FIRST_CONTACT
  RAPPORT_BUILDING
  TRUST_ESTABLISHED
  STRATEGIC_PARTNER
  LONG_TERM_CLIENT
}

enum appointment_phase {
  LEAD
  PROSPECT
  PROPOSAL
  NEGOTIATION
  CLOSING
  POST_SALE
}

enum appointment_source {
  REFERRAL
  COLD_OUTREACH
  NETWORKING_EVENT
  INBOUND_INQUIRY
  SOCIAL_MEDIA
  EXISTING_CLIENT
  PARTNER_REFERRAL
}

enum event_category {
  GENERAL
  MEETING
  APPOINTMENT
  TASK_DUE
  PROJECT
  PERSONAL
  TEAM
  EVENT
}

enum recurrence_type {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

enum ai_analysis_type {
  COMPREHENSIVE
  TASK_FOCUSED
  EVENT_FOCUSED
  PROJECT_FOCUSED
  SENTIMENT_ONLY
}

enum urgency_level {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum recommendation_type {
  TASK_CREATION
  PROJECT_CREATION
  EVENT_SCHEDULING
  APPOINTMENT_BOOKING
  CONTACT_ADDITION
  KNOWLEDGE_TAGGING
  PRIORITY_ADJUSTMENT
}

enum recommendation_status {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
  IMPLEMENTED
}

enum processing_step {
  CONTENT_EXTRACTION
  SECTION_SPLITTING
  AI_ANALYSIS
  ENTITY_EXTRACTION
  RECOMMENDATION_GENERATION
  KNOWLEDGE_CREATION
  CLEANUP
}

enum processing_step_status {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  SKIPPED
}

enum google_docs_sync_status {
  PENDING
  SYNCING
  COMPLETED
  ERROR
  FAILED
}

enum relationship_type {
  TRANSFERABLE
  SIMULTANEOUS
  DEPENDENT
}
