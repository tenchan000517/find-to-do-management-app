/**
 * Google Apps Script - „Çø„ÉñËá™ÂãïÂàá„ÇäÊõø„Åà„Ç∑„Çπ„ÉÜ„É†
 * Google Docs„Å´„Éê„Ç§„É≥„Éâ„Åó„Å¶‰ΩøÁî®
 */

/**
 * „Éâ„Ç≠„É•„É°„É≥„Éà„ÅåÈñã„Åã„Çå„ÅüÊôÇ„Å´Ëá™ÂãïÂÆüË°å„Åï„Çå„ÇãÈñ¢Êï∞
 * URL„Éë„É©„É°„Éº„Çø„ÇíËß£Êûê„Åó„Å¶ÊåáÂÆö„Åï„Çå„Åü„Çø„Éñ„Å´Ëá™ÂãïÂàá„ÇäÊõø„Åà
 */
function onOpen(e) {
  try {
    console.log('üöÄ Google Docs onOpen triggered');
    
    // URL„Éë„É©„É°„Éº„Çø„ÇíÂèñÂæó
    const url = e && e.source ? e.source.getUrl() : null;
    if (!url) {
      console.log('üìÑ URL not available in event, trying alternative method');
      // ‰ª£ÊõøÊâãÊÆµ: „Éâ„Ç≠„É•„É°„É≥„Éà„Åã„ÇâÁõ¥Êé•URLÂèñÂæó„ÇíË©¶Ë°å
      handleTabSwitching();
      return;
    }
    
    console.log('üîó Document URL:', url);
    
    // URL„Éë„É©„É°„Éº„Çø„ÇíËß£Êûê
    const urlParams = parseUrlParameters(url);
    
    // gas_switch=true „Éë„É©„É°„Éº„Çø„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„Åø„Çø„ÉñÂàá„ÇäÊõø„Åà„ÇíÂÆüË°å
    if (urlParams.gas_switch === 'true' && urlParams.tab) {
      const targetTab = urlParams.tab; // ‰æã: "t.5"
      console.log('üéØ Target tab detected:', targetTab);
      
      // 2ÁßíÈÅÖÂª∂„Åß„Çø„ÉñÂàá„ÇäÊõø„ÅàÂÆüË°åÔºàGoogle DocsË™≠„ÅøËæº„ÅøÂÆå‰∫ÜÂæÖ„Å°Ôºâ
      Utilities.sleep(2000);
      switchToTab(targetTab);
    } else {
      console.log('‚è≠Ô∏è No tab switching parameters found');
    }
    
  } catch (error) {
    console.error('‚ùå onOpen error:', error);
    // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å¶„ÇÇ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆÈÄöÂ∏∏Âãï‰Ωú„ÅØÂ¶®„Åí„Å™„ÅÑ
  }
}

/**
 * URL„Éë„É©„É°„Éº„Çø„ÇíËß£Êûê„Åô„ÇãÈñ¢Êï∞
 */
function parseUrlParameters(url) {
  const params = {};
  try {
    const urlObj = new URL(url);
    const searchParams = urlObj.searchParams;
    
    // ÂÖ®„Éë„É©„É°„Éº„Çø„ÇíÂèñÂæó
    for (const [key, value] of searchParams.entries()) {
      params[key] = value;
    }
    
    console.log('üìã Parsed parameters:', params);
  } catch (error) {
    console.error('‚ùå URL parsing error:', error);
  }
  
  return params;
}

/**
 * ÊåáÂÆö„Åï„Çå„Åü„Çø„Éñ„Å´Âàá„ÇäÊõø„Åà„ÇãÈñ¢Êï∞
 */
function switchToTab(targetTabParam) {
  try {
    console.log('üîÑ Starting tab switch to:', targetTabParam);
    
    const doc = DocumentApp.getActiveDocument();
    if (!doc) {
      console.error('‚ùå No active document found');
      return;
    }
    
    // "t.5" ÂΩ¢Âºè„Åã„ÇâÂÆüÈöõ„ÅÆ„Çø„ÉñID„ÇíÂèñÂæó
    const tabId = convertTabParamToTabId(doc, targetTabParam);
    if (!tabId) {
      console.error('‚ùå Could not find tab for parameter:', targetTabParam);
      return;
    }
    
    console.log('üéØ Switching to tab ID:', tabId);
    
    // „Çø„Éñ„ÇíÂàá„ÇäÊõø„Åà
    doc.setActiveTab(tabId);
    
    // ÊàêÂäüÈÄöÁü•Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
    showTabSwitchNotification(targetTabParam);
    
    console.log('‚úÖ Tab switch completed successfully');
    
  } catch (error) {
    console.error('‚ùå Tab switching error:', error);
  }
}

/**
 * "t.5" ÂΩ¢Âºè„ÅÆ„Éë„É©„É°„Éº„Çø„ÇíÂÆüÈöõ„ÅÆ„Çø„ÉñID„Å´Â§âÊèõ
 */
function convertTabParamToTabId(doc, targetTabParam) {
  try {
    // "t.5" ‚Üí Êï∞ÂÄ§5„ÇíÊäΩÂá∫
    const tabIndexMatch = targetTabParam.match(/t\.(\d+)/);
    if (!tabIndexMatch) {
      console.error('‚ùå Invalid tab parameter format:', targetTabParam);
      return null;
    }
    
    const tabIndex = parseInt(tabIndexMatch[1]);
    console.log('üìç Target tab index:', tabIndex);
    
    // ÂÖ®„Çø„Éñ„ÇíÂèñÂæóÔºàÂ≠ê„Çø„Éñ„ÇÇÂê´„ÇÄÔºâ
    const allTabs = getAllTabs(doc);
    
    if (tabIndex >= 0 && tabIndex < allTabs.length) {
      const targetTab = allTabs[tabIndex];
      console.log('üéØ Found target tab:', targetTab.getTitle());
      return targetTab.getId();
    } else {
      console.error('‚ùå Tab index out of range:', tabIndex, 'Total tabs:', allTabs.length);
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå Tab ID conversion error:', error);
    return null;
  }
}

/**
 * „Éâ„Ç≠„É•„É°„É≥„ÉàÂÜÖ„ÅÆÂÖ®„Çø„Éñ„ÇíÂèñÂæóÔºà„Éï„É©„ÉÉ„Éà„É™„Çπ„ÉàÔºâ
 */
function getAllTabs(doc) {
  const allTabs = [];
  
  function addCurrentAndChildTabs(tab) {
    allTabs.push(tab);
    const childTabs = tab.getChildTabs();
    for (let i = 0; i < childTabs.length; i++) {
      addCurrentAndChildTabs(childTabs[i]);
    }
  }
  
  const topLevelTabs = doc.getTabs();
  for (let i = 0; i < topLevelTabs.length; i++) {
    addCurrentAndChildTabs(topLevelTabs[i]);
  }
  
  console.log('üìö Total tabs found:', allTabs.length);
  return allTabs;
}

/**
 * „Çø„ÉñÂàá„ÇäÊõø„ÅàÂÆå‰∫Ü„ÅÆÈÄöÁü•Ë°®Á§∫Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
 */
function showTabSwitchNotification(targetTab) {
  try {
    // Á∞°Âçò„Å™ÈÄöÁü•„Çí„Ç≥„É≥„ÇΩ„Éº„É´„Å´Ë°®Á§∫
    console.log('üéâ Successfully switched to tab:', targetTab);
    
    // „Çà„ÇäÈ´òÂ∫¶„Å™ÈÄöÁü•„ÅåÂøÖË¶Å„Å™Â†¥Âêà„ÅØ„Åì„Åì„Å´ËøΩÂä†
    // ‰æã: DocumentApp.getUi().alert() „Å™„Å©
    
  } catch (error) {
    console.error('‚ùå Notification error:', error);
  }
}

/**
 * ‰ª£ÊõøÊâãÊÆµ„ÅÆ„Çø„ÉñÂàá„ÇäÊõø„ÅàÂá¶ÁêÜ
 * URL„ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅÆÂØæÂøú
 */
function handleTabSwitching() {
  try {
    console.log('üîÑ Alternative tab switching method');
    
    // „Éñ„É©„Ç¶„Ç∂„ÅÆURL„Åã„ÇâÁõ¥Êé•„Éë„É©„É°„Éº„Çø„ÇíÂèñÂæó„Åô„ÇãÊñπÊ≥ï„ÇíÂÆüË£Ö
    // Ê≥®ÊÑè: „Åì„ÅÆÊ©üËÉΩ„ÅØÂà∂Èôê„Åå„ÅÇ„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô
    
  } catch (error) {
    console.error('‚ùå Alternative method error:', error);
  }
}

/**
 * ÊâãÂãï„ÉÜ„Çπ„ÉàÁî®„ÅÆÈñ¢Êï∞
 * GAS„Ç®„Éá„Ç£„Çø„Åã„ÇâÁõ¥Êé•ÂÆüË°å„Åó„Å¶„ÉÜ„Çπ„ÉàÂèØËÉΩ
 */
function testTabSwitching() {
  console.log('üß™ Testing tab switching...');
  
  const doc = DocumentApp.getActiveDocument();
  const allTabs = getAllTabs(doc);
  
  console.log('üìã Available tabs:');
  allTabs.forEach((tab, index) => {
    console.log(`  ${index}: ${tab.getTitle()} (ID: ${tab.getId()})`);
  });
  
  // 2Áï™ÁõÆ„ÅÆ„Çø„Éñ„Å´Âàá„ÇäÊõø„Åà„ÉÜ„Çπ„Éà
  if (allTabs.length > 1) {
    console.log('üéØ Testing switch to second tab...');
    switchToTab('t.1');
  }
}

/**
 * „Ç´„Çπ„Çø„É†„É°„Éã„É•„Éº„ÇíËøΩÂä†
 * „É¶„Éº„Ç∂„Éº„ÅåÊâãÂãï„Åß„Çø„ÉñÂàá„ÇäÊõø„Åà„ÉÜ„Çπ„Éà„ÇíÂÆüË°åÂèØËÉΩ
 */
function onInstall(e) {
  onOpen(e);
}

/**
 * „Ç´„Çπ„Çø„É†„É°„Éã„É•„Éº„ÅÆËøΩÂä†
 */
function addCustomMenu() {
  try {
    const ui = DocumentApp.getUi();
    ui.createMenu('üìë „Çø„ÉñÂàá„ÇäÊõø„Åà')
      .addItem('üß™ „ÉÜ„Çπ„ÉàÂÆüË°å', 'testTabSwitching')
      .addItem('üìã ÂÖ®„Çø„ÉñË°®Á§∫', 'showAllTabs')
      .addToUi();
    
    console.log('üìã Custom menu added successfully');
  } catch (error) {
    console.error('‚ùå Menu creation error:', error);
  }
}

/**
 * ÂÖ®„Çø„Éñ„ÅÆÊÉÖÂ†±„ÇíË°®Á§∫
 */
function showAllTabs() {
  try {
    const doc = DocumentApp.getActiveDocument();
    const allTabs = getAllTabs(doc);
    
    let message = 'üìã Âà©Áî®ÂèØËÉΩ„Å™„Çø„Éñ‰∏ÄË¶ß:\n\n';
    allTabs.forEach((tab, index) => {
      message += `${index}: ${tab.getTitle()}\n`;
    });
    
    DocumentApp.getUi().alert('„Çø„Éñ‰∏ÄË¶ß', message, DocumentApp.getUi().ButtonSet.OK);
  } catch (error) {
    console.error('‚ùå Show tabs error:', error);
  }
}