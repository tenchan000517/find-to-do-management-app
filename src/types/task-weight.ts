// ウエイト・リソースベース自動スケジューリング - タスクウエイト・見積もりシステム型定義
// 作業負荷・複雑性・緊急度を総合的に評価して最適配置を実現

export interface TaskWeightProfile {
  id: string;
  taskId: string;
  
  // 基本ウエイト情報
  estimatedWeight: number;        // 1-10 (軽作業～重作業)
  estimatedDuration: number;      // 予想作業時間(分)
  estimatedDays: number;          // 完了までの予想日数
  complexityLevel: 'simple' | 'medium' | 'complex' | 'expert';
  
  // 分割・依存関係
  canSplit: boolean;              // 分割実行可能
  splitMinimumDuration: number;   // 分割時の最小作業時間(分)
  dependsOnTasks: string[];       // 依存タスクID配列
  blocksOtherTasks: string[];     // このタスクが完了を阻むタスクID配列
  
  // 優先度・重要度
  urgencyScore: number;           // 1-10 (緊急度)
  importanceScore: number;        // 1-10 (重要度)
  priorityMatrix: 'urgent-important' | 'urgent-not-important' | 'not-urgent-important' | 'not-urgent-not-important';
  
  // リソース要求
  energyRequirement: 'low' | 'medium' | 'high'; // 必要エネルギー
  creativityRequirement: 'low' | 'medium' | 'high'; // 創造性要求
  focusRequirement: 'low' | 'medium' | 'high';     // 集中力要求
  collaborationNeeded: boolean;   // 他者との協力必要
  resourcesNeeded: string[];      // 必要リソース (PC, ネット, 資料等)
  
  // 時間・環境要因
  optimalTimeOfDay: 'morning' | 'afternoon' | 'evening' | 'flexible';
  optimalEnvironment: 'office' | 'home' | 'cafe' | 'quiet' | 'flexible';
  interruptionTolerance: 'low' | 'medium' | 'high'; // 中断耐性
  
  // リスク・バッファ
  deadlineBuffer: number;         // 締切バッファ(日)
  riskLevel: 'low' | 'medium' | 'high'; // 遅延リスク
  contingencyPlan?: string;       // 緊急時対応策
  
  // 自動生成・学習
  autoGeneratedFrom?: 'appointment' | 'project' | 'template' | 'ai-analysis'; // 自動生成元
  accuracyScore?: number;         // 見積もり精度 0-1
  actualTimeSpent?: number;       // 実際の作業時間(学習用)
  
  createdAt: string;
  updatedAt: string;
}

// タスクタイプ別ウエイトプリセット
export const TASK_WEIGHT_PRESETS: Record<string, Partial<TaskWeightProfile>> = {
  // 軽作業系
  'email-reply': {
    estimatedWeight: 2,
    estimatedDuration: 15,
    estimatedDays: 1,
    complexityLevel: 'simple',
    canSplit: false,
    splitMinimumDuration: 15,
    energyRequirement: 'low',
    creativityRequirement: 'low',
    focusRequirement: 'low',
    optimalTimeOfDay: 'flexible',
    interruptionTolerance: 'high'
  },
  
  'quick-review': {
    estimatedWeight: 3,
    estimatedDuration: 30,
    estimatedDays: 1,
    complexityLevel: 'simple',
    canSplit: true,
    splitMinimumDuration: 10,
    energyRequirement: 'low',
    creativityRequirement: 'low',
    focusRequirement: 'medium',
    optimalTimeOfDay: 'flexible',
    interruptionTolerance: 'medium'
  },
  
  // 中程度作業
  'document-creation': {
    estimatedWeight: 5,
    estimatedDuration: 120,
    estimatedDays: 2,
    complexityLevel: 'medium',
    canSplit: true,
    splitMinimumDuration: 30,
    energyRequirement: 'medium',
    creativityRequirement: 'medium',
    focusRequirement: 'high',
    optimalTimeOfDay: 'morning',
    interruptionTolerance: 'low'
  },
  
  'research-task': {
    estimatedWeight: 6,
    estimatedDuration: 180,
    estimatedDays: 3,
    complexityLevel: 'medium',
    canSplit: true,
    splitMinimumDuration: 45,
    energyRequirement: 'medium',
    creativityRequirement: 'high',
    focusRequirement: 'high',
    optimalTimeOfDay: 'morning',
    interruptionTolerance: 'low'
  },
  
  // 重作業系
  'presentation-creation': {
    estimatedWeight: 7,
    estimatedDuration: 240,
    estimatedDays: 4,
    complexityLevel: 'complex',
    canSplit: true,
    splitMinimumDuration: 60,
    energyRequirement: 'high',
    creativityRequirement: 'high',
    focusRequirement: 'high',
    optimalTimeOfDay: 'morning',
    interruptionTolerance: 'low'
  },
  
  'project-planning': {
    estimatedWeight: 8,
    estimatedDuration: 300,
    estimatedDays: 5,
    complexityLevel: 'complex',
    canSplit: true,
    splitMinimumDuration: 90,
    energyRequirement: 'high',
    creativityRequirement: 'high',
    focusRequirement: 'high',
    optimalTimeOfDay: 'morning',
    interruptionTolerance: 'low'
  },
  
  // 超重作業
  'system-design': {
    estimatedWeight: 9,
    estimatedDuration: 480,
    estimatedDays: 7,
    complexityLevel: 'expert',
    canSplit: true,
    splitMinimumDuration: 120,
    energyRequirement: 'high',
    creativityRequirement: 'high',
    focusRequirement: 'high',
    optimalTimeOfDay: 'morning',
    interruptionTolerance: 'low'
  },
  
  'strategic-planning': {
    estimatedWeight: 10,
    estimatedDuration: 600,
    estimatedDays: 10,
    complexityLevel: 'expert',
    canSplit: true,
    splitMinimumDuration: 180,
    energyRequirement: 'high',
    creativityRequirement: 'high',
    focusRequirement: 'high',
    optimalTimeOfDay: 'morning',
    interruptionTolerance: 'low'
  }
};

// アイゼンハワーマトリックス計算
export function calculatePriorityMatrix(
  urgencyScore: number,
  importanceScore: number
): TaskWeightProfile['priorityMatrix'] {
  const urgentThreshold = 6;
  const importantThreshold = 6;
  
  const isUrgent = urgencyScore >= urgentThreshold;
  const isImportant = importanceScore >= importantThreshold;
  
  if (isUrgent && isImportant) return 'urgent-important';
  if (isUrgent && !isImportant) return 'urgent-not-important';
  if (!isUrgent && isImportant) return 'not-urgent-important';
  return 'not-urgent-not-important';
}

// ウエイト自動計算
export function calculateTaskWeight(params: {
  duration: number; // 分
  complexityLevel: TaskWeightProfile['complexityLevel'];
  urgencyScore: number;
  importanceScore: number;
  energyRequirement: TaskWeightProfile['energyRequirement'];
  focusRequirement: TaskWeightProfile['focusRequirement'];
}): number {
  let weight = 1;
  
  // 時間ベース (基礎ウエイト)
  if (params.duration <= 30) weight += 1;      // 30分以下: +1
  else if (params.duration <= 60) weight += 2; // 1時間以下: +2
  else if (params.duration <= 120) weight += 3; // 2時間以下: +3
  else if (params.duration <= 240) weight += 4; // 4時間以下: +4
  else weight += 5; // 4時間超: +5
  
  // 複雑性ベース
  switch (params.complexityLevel) {
    case 'simple': weight += 0; break;
    case 'medium': weight += 1; break;
    case 'complex': weight += 2; break;
    case 'expert': weight += 3; break;
  }
  
  // 緊急度・重要度ベース
  const priorityBonus = (params.urgencyScore + params.importanceScore) / 20 * 2; // 0-2
  weight += priorityBonus;
  
  // エネルギー・集中力要求ベース
  const energyBonus = params.energyRequirement === 'high' ? 1 : 
                     params.energyRequirement === 'medium' ? 0.5 : 0;
  const focusBonus = params.focusRequirement === 'high' ? 1 : 
                    params.focusRequirement === 'medium' ? 0.5 : 0;
  weight += energyBonus + focusBonus;
  
  // 1-10の範囲に調整
  return Math.max(1, Math.min(10, Math.round(weight)));
}

// タスクタイプ推定
export function estimateTaskType(taskTitle: string, taskDescription?: string): string {
  const text = `${taskTitle} ${taskDescription || ''}`.toLowerCase();
  
  // キーワードベースの分類
  if (text.includes('メール') || text.includes('返信') || text.includes('確認')) {
    return 'email-reply';
  }
  if (text.includes('レビュー') || text.includes('確認') || text.includes('チェック')) {
    return 'quick-review';
  }
  if (text.includes('資料') || text.includes('ドキュメント') || text.includes('書類')) {
    return 'document-creation';
  }
  if (text.includes('調査') || text.includes('リサーチ') || text.includes('研究')) {
    return 'research-task';
  }
  if (text.includes('プレゼン') || text.includes('発表') || text.includes('説明')) {
    return 'presentation-creation';
  }
  if (text.includes('計画') || text.includes('プラン') || text.includes('企画')) {
    return 'project-planning';
  }
  if (text.includes('設計') || text.includes('アーキテクチャ') || text.includes('システム')) {
    return 'system-design';
  }
  if (text.includes('戦略') || text.includes('戦術') || text.includes('ストラテジー')) {
    return 'strategic-planning';
  }
  
  // デフォルト
  return 'document-creation';
}

// バリデーション関数
export function validateTaskWeightProfile(profile: Partial<TaskWeightProfile>): {
  isValid: boolean;
  errors: string[];
  warnings: string[];
} {
  const errors: string[] = [];
  const warnings: string[] = [];
  
  // 必須フィールドチェック
  if (!profile.taskId) {
    errors.push('タスクIDは必須です');
  }
  
  // ウエイトチェック
  if (profile.estimatedWeight !== undefined) {
    if (profile.estimatedWeight < 1 || profile.estimatedWeight > 10) {
      errors.push('推定ウエイトは1-10の範囲で設定してください');
    }
  }
  
  // 時間チェック
  if (profile.estimatedDuration !== undefined) {
    if (profile.estimatedDuration < 5 || profile.estimatedDuration > 1440) {
      errors.push('推定時間は5分-24時間の範囲で設定してください');
    }
  }
  
  // 日数チェック
  if (profile.estimatedDays !== undefined) {
    if (profile.estimatedDays < 1 || profile.estimatedDays > 365) {
      errors.push('推定日数は1-365日の範囲で設定してください');
    }
  }
  
  // スコアチェック
  if (profile.urgencyScore !== undefined) {
    if (profile.urgencyScore < 1 || profile.urgencyScore > 10) {
      errors.push('緊急度は1-10の範囲で設定してください');
    }
  }
  
  if (profile.importanceScore !== undefined) {
    if (profile.importanceScore < 1 || profile.importanceScore > 10) {
      errors.push('重要度は1-10の範囲で設定してください');
    }
  }
  
  // 分割時間チェック
  if (profile.canSplit && profile.splitMinimumDuration !== undefined) {
    if (profile.estimatedDuration !== undefined && 
        profile.splitMinimumDuration > profile.estimatedDuration) {
      warnings.push('分割最小時間が総時間を超えています');
    }
  }
  
  // デッドラインバッファチェック
  if (profile.deadlineBuffer !== undefined) {
    if (profile.deadlineBuffer < 0 || profile.deadlineBuffer > 30) {
      warnings.push('締切バッファは0-30日の範囲を推奨します');
    }
  }
  
  return {
    isValid: errors.length === 0,
    errors,
    warnings
  };
}

// タスクウエイトプロファイル作成ヘルパー
export function createTaskWeightProfile(
  taskId: string,
  taskTitle: string,
  taskDescription?: string,
  customSettings?: Partial<TaskWeightProfile>
): TaskWeightProfile {
  // タスクタイプ推定
  const estimatedType = estimateTaskType(taskTitle, taskDescription);
  const preset = TASK_WEIGHT_PRESETS[estimatedType] || TASK_WEIGHT_PRESETS['document-creation'];
  
  // ウエイト自動計算
  const calculatedWeight = calculateTaskWeight({
    duration: customSettings?.estimatedDuration || preset.estimatedDuration || 60,
    complexityLevel: customSettings?.complexityLevel || preset.complexityLevel || 'medium',
    urgencyScore: customSettings?.urgencyScore || 5,
    importanceScore: customSettings?.importanceScore || 5,
    energyRequirement: customSettings?.energyRequirement || preset.energyRequirement || 'medium',
    focusRequirement: customSettings?.focusRequirement || preset.focusRequirement || 'medium'
  });
  
  // 優先度マトリックス計算
  const urgency = customSettings?.urgencyScore || 5;
  const importance = customSettings?.importanceScore || 5;
  const priorityMatrix = calculatePriorityMatrix(urgency, importance);
  
  const now = new Date().toISOString();
  
  return {
    id: `weight_${taskId}_${Date.now()}`,
    taskId,
    estimatedWeight: customSettings?.estimatedWeight || calculatedWeight,
    estimatedDuration: customSettings?.estimatedDuration || preset.estimatedDuration || 60,
    estimatedDays: customSettings?.estimatedDays || preset.estimatedDays || 1,
    complexityLevel: customSettings?.complexityLevel || preset.complexityLevel || 'medium',
    canSplit: customSettings?.canSplit ?? preset.canSplit ?? true,
    splitMinimumDuration: customSettings?.splitMinimumDuration || preset.splitMinimumDuration || 30,
    dependsOnTasks: customSettings?.dependsOnTasks || [],
    blocksOtherTasks: customSettings?.blocksOtherTasks || [],
    urgencyScore: urgency,
    importanceScore: importance,
    priorityMatrix,
    energyRequirement: customSettings?.energyRequirement || preset.energyRequirement || 'medium',
    creativityRequirement: customSettings?.creativityRequirement || preset.creativityRequirement || 'medium',
    focusRequirement: customSettings?.focusRequirement || preset.focusRequirement || 'medium',
    collaborationNeeded: customSettings?.collaborationNeeded ?? false,
    resourcesNeeded: customSettings?.resourcesNeeded || [],
    optimalTimeOfDay: customSettings?.optimalTimeOfDay || preset.optimalTimeOfDay || 'flexible',
    optimalEnvironment: customSettings?.optimalEnvironment || 'flexible',
    interruptionTolerance: customSettings?.interruptionTolerance || preset.interruptionTolerance || 'medium',
    deadlineBuffer: customSettings?.deadlineBuffer || 1,
    riskLevel: customSettings?.riskLevel || 'medium',
    autoGeneratedFrom: customSettings?.autoGeneratedFrom,
    createdAt: now,
    updatedAt: now,
    ...customSettings
  };
}

// ウエイト分析・統計関数
export function analyzeTaskWeights(profiles: TaskWeightProfile[]): {
  averageWeight: number;
  totalEstimatedTime: number;
  complexityDistribution: Record<TaskWeightProfile['complexityLevel'], number>;
  priorityDistribution: Record<TaskWeightProfile['priorityMatrix'], number>;
  highRiskTasks: TaskWeightProfile[];
  splittableTasks: TaskWeightProfile[];
  recommendations: string[];
} {
  if (profiles.length === 0) {
    return {
      averageWeight: 0,
      totalEstimatedTime: 0,
      complexityDistribution: { simple: 0, medium: 0, complex: 0, expert: 0 },
      priorityDistribution: { 
        'urgent-important': 0, 
        'urgent-not-important': 0, 
        'not-urgent-important': 0, 
        'not-urgent-not-important': 0 
      },
      highRiskTasks: [],
      splittableTasks: [],
      recommendations: []
    };
  }
  
  const averageWeight = profiles.reduce((sum, p) => sum + p.estimatedWeight, 0) / profiles.length;
  const totalEstimatedTime = profiles.reduce((sum, p) => sum + p.estimatedDuration, 0);
  
  // 複雑性分布
  const complexityDistribution = profiles.reduce((dist, p) => {
    dist[p.complexityLevel]++;
    return dist;
  }, { simple: 0, medium: 0, complex: 0, expert: 0 });
  
  // 優先度分布  
  const priorityDistribution = profiles.reduce((dist, p) => {
    dist[p.priorityMatrix]++;
    return dist;
  }, { 
    'urgent-important': 0, 
    'urgent-not-important': 0, 
    'not-urgent-important': 0, 
    'not-urgent-not-important': 0 
  });
  
  // 高リスクタスク
  const highRiskTasks = profiles.filter(p => p.riskLevel === 'high');
  
  // 分割可能タスク
  const splittableTasks = profiles.filter(p => p.canSplit && p.estimatedDuration >= 60);
  
  // 推奨事項
  const recommendations: string[] = [];
  
  if (averageWeight > 7) {
    recommendations.push('平均ウエイトが高いです。軽いタスクを追加してバランスを取ることをお勧めします。');
  }
  
  if (priorityDistribution['urgent-important'] > profiles.length * 0.3) {
    recommendations.push('緊急かつ重要なタスクが多すぎます。優先度の見直しを推奨します。');
  }
  
  if (highRiskTasks.length > 0) {
    recommendations.push(`${highRiskTasks.length}個のタスクに遅延リスクがあります。早めの対応をお勧めします。`);
  }
  
  if (totalEstimatedTime > 480) { // 8時間超
    recommendations.push('総作業時間が長すぎます。タスクの分割や優先度の調整を検討してください。');
  }
  
  return {
    averageWeight,
    totalEstimatedTime,
    complexityDistribution,
    priorityDistribution,
    highRiskTasks,
    splittableTasks,
    recommendations
  };
}